Resources:
  AWSEBAutoScalingGroup:
    Metadata:
      AWS::CloudFormation::Authentication:
        S3RoleAuth:
          type: "s3"
          roleName: "ssl-cert-downloader"
  sslSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: "tcp"
      ToPort: 443
      FromPort: 443
      CidrIp: "0.0.0.0/0"

files:
  "/tmp/server.crt" :
    mode: "000700"
    owner: root
    group: root
    source: "http://lets-encrypt-ssl-certs.s3-website-eu-west-1.amazonaws.com/cert.pem"
  "/tmp/server.key" :
    mode: "000700"
    owner: root
    group: root
    source: "http://lets-encrypt-ssl-certs.s3-website-eu-west-1.amazonaws.com/privkey.pem"
  "/etc/nginx/conf.d/https.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
          listen       443;
          server_name  localhost;

          ssl                  on;
          ssl_certificate      /etc/pki/tls/certs/server.crt;
          ssl_certificate_key  /etc/pki/tls/certs/server.key;

          ssl_session_timeout  5m;

          ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
          ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
          ssl_prefer_server_ciphers   on;

          location /ws {
              proxy_pass  http://nodejs;
              proxy_http_version 1.1;
              proxy_set_header        Host            $host;
              proxy_set_header        X-Real-IP       $remote_addr;
              proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header        Upgrade         $http_upgrade;
              proxy_set_header        Connection      "upgrade";
          }

          location / {
                alias /var/app/current/public;
          }
      }

container_commands:
  move_cert:
    command: "mv /tmp/server.crt /etc/pki/tls/certs/"
  move_key:
    command: "mv /tmp/server.key /etc/pki/tls/certs/"
